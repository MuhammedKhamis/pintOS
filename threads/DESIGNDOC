			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Yakout <iyakout@hotmail.com>
Mohamed Shaaban <email@domain.example>
Muhammed Khamis <muhammedessam10@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added members in thread struct in thread.h file:

  int sleep_time;;
  - Number of ticks the thread will sleep.

Added variables in file timer.c:

  static struct list sleep_list;
  - List to keep track of all sleeping threads.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In timer_sleep(ticks):

  1. disable interupts.
  2. call thread_sleep(ticks).
  3. enables interupts.

    thread_sleep (ticks):
      1. The sleep_time of the thread is set.
      2. The thread is added to the 'sleep_list'.
      3. The thread is blocked.

In timer_interrupt():

  1. Loop over 'sleep_list'.
  2. decrease the 'sleep_time' for all threads by 1 tick.
  3. Wake up and remove from 'sleep_list' any thread whose
     sleep_time has become zero by calling 'thread_unblock()'.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

'sleep_list' is kept sorted by wakeup time so the timer interrupt
handler doesn't have to look at all sleeping threads.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

There are only two data modified in 'timer_sleep()':
  1. Attributes of struct thread.
  2. 'sleep_list' list in "thread.c".

For #1, No potential race condition here.
For #2 interrupts are disabled which guarantees no other thread can be
modifying the list at the same time.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

The only thing shared between 'timer_sleep()' and the timer interrupt handler is
'sleep_list', so we disable interrupts before modifying
it from 'timer_sleep()'.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

One way or another, we had to keep track of threads that are sleeping and
the remaining 'sleep_time', There were 2 options:
  1. Create a new struct for each sleeping thread containing its 'sleep_time' 
    and keep a list of these structs.
  2. Directly add 'sleep_time' to struct thread.

 The second option seemed better because why create a separate
 struct associated with a thread that already exists when we can just
 put all the information in one place?, after all it is related to each
 thread so why not put it in struct thread.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    int base_priority;                  /* Real priority for thread. */
    int effective_priority;             /* Donated priority from another thread. */

    int sleep_time;

    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    struct list lock_list;              /* List for the lock thread aquires. */
    struct lock *lock_waiting_for;       /* lock I am waiting to aquire. */

    
    /* BSD SCHEDULER */
    int recent_cpu;                     /* Thread recent cpu time*/
    int nice;                           /* Thread nice value*/

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

int base_priority: to save the base priority of the current thread.
int effective_priority: to save the maximum donated priority from other threads.
struct list lock_list: to list the locks that is held by this thread and had waiters for that lock.
struct lock *lock_waiting_for: to save the lock that this thread is stoped by inorder to know which thread, that this thread will donate to.

/* Lock. */
struct lock 
  {
    struct thread *holder;      /* Thread holding lock (for debugging). */
    struct semaphore semaphore; /* Binary semaphore controlling access. */
    struct list_elem elem;      /* list element for the lock. */
  };

struct list_elem elem: to put this lock in the lock_list of the lock holder of that lock.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

We used struct lock to know the thread that current thread should donate its priority to, also we used struct list data strcuture which hold
the locks whose lists' is ordered by priority in decreasing order to help us to revert back to the appropriate priority.

				      +--------------+
Thread example will be like that :    |   Thread A   |
				      |base | donated|
				      +--------------+

					+-----------+             +-----------+
					|     A     |  donation   |     B     |
					|  99 | 99  |------------>|  2 | 99   |-------------------------
					+-----------+             +-----------+                         |
                                                                                                                                                                                           ↓
                                        +-----------+  donation    +-----------+    donation      +-----------+
                                        |     E     |------------->|    D      |----------------->|     C     |
                                        | 100 | 100 |              | 20 | 100  |                  |  5  | 100 |
                                        +-----------+              +-----------+                  +-----------+
                                                                                                                                 ↑                                                       ↑                 
                                                                   +-----------+                  +-----------+
                                                                   |    F      |                  |     G     |
                                                                   | 30 | 30   |                  |  20 | 20  |
                                                                   +-----------+                  +-----------+
                                      

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We use list_max method with comparator that takes out the element with maximum priority. 


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

We firstly check if we could aquire that lock using lock_try_acquire(), if it returned true then the lock is acquired
but, if it returned false then we see if waiter list of lock is empty, to ensure that I pushed that lock once in the lock_holder's
lock_list, we push the lock in the lock list of the lock holder thread, then we make the the lock_waiting_for attribute of the current_thread
to be the current lock, then call the donation function to donate the priority to the lock holder, then at last we call the sema_down function.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

We make the lock_holder = null, as no one would be holding the lock after releaseing it, then we check if there are waiters for that lock
to ensure that the current lock in the lock_list of the lock_holder, to remove the elem of that lock, after that we revert to the approprite
priority, then call sema_up of that lock. 



---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

a race could happened if we are working one multicore processor, and process A what to set its priority,
then this process is interrupted by process B that want also to update its priority. then It may cause conflict
in priorities which will cause conflict in the ready list insertion by order.

to solve this we used intr_disable and intr_enable to ensure that no conflict happens.

yes, we can use lock to avoid this race. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

I choose this design because I had to add the least amount of variables possible.
and without using malloc to allocate memory, also we used the linked list implementation,
to make the overall implementation more easier. 


        ADVANCED SCHEDULER
        ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added members in "thread struct" in "thread.h" file:

  int recent_cpu:
  - 17/14 float represented as integer.
  - used to count how many times a thread has held the cpu over the last minute
  - used to calculate thread priority

  int nice:
  - determines how "nice" the thread should be to other threads
  - value range = {-20, -19, ...,0, ..., 19, 20}
  - implies who much a thread is willing to give the cpu if others need it

Added global variables in the "thread.h" file:

   static int load_avg:
  - 17/14 float represented as integer.
  - represents how many threads were competing for cpu time over the past minute


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   1   2   60  57  55   A
 4     4   1   2   59  57  55   A
 8     8   1   2   58  57  55   A
12     12  1   2   57  57  55   B
16     12  5   2   57  56  55   A
20     16  5   2   56  56  55   B
24     16  9   2   56  55  55   A
28     20  9   2   55  55  55   C
32     20  9   6   55  55  54   B
36     20  13  6   55  54  54   A

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

1. multiple threads having the same priority when schedule() called
  - when thead yields the cpu, use list_push_back() to add this
    thread at the end of the corresponding queue
  - when selecting the next thread to run, select the first thread
    from the front of the queue

2. calculate thread priority math_round
  - calculating a priority integer from a float recent_cpu
  - the problem is to round up or down
  - round down is used

implemented BSD scheduler does exactly the same as described in above

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

cost of scheduling = load_avg, or recent_cpu, or priority, or all
which happens inside an interrupt context
we only update priority of the running thread when schedule() is called
leaving the other two parameters and threads un-updated
saving time spent inside an interrupt context
these remaning parameters are updated every 100 ticks which is convenient
as we want to update these parameters but at the same time not stay inside
interrupt context "timer_interrupt()" for long time 

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

BSD scheduler code was quite simple. all code control took place in the
thread_tick() function with the addition of thread_yield() at lock release.
advantages:
  - code simplicity
  - easy to debug
disadvantages:
  - deciding to remove fixed_point.h abstract layer after implementing it

having extra time, i would've re-added the fixed_point.h arithmetic header
to make the code more modular after having got the equations right.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

we decided not to add an abstract layer for fixed_point arithmetic.
we tried at first and in fact created fixed_point.c and fixed_point.h
the fixed_point.h looked more modular
but we had to implement too many equations.
the formulae for calcualting load_avg, recent_cpu, and priority got more
complicated and confusing
and debugging the output and equation correctness was not easy at all
on the other hand we implementing fixed_point arithmetic with normal integers
made debugging alot easier. the codes for updating priority variables
became very simple (3-4 lines of code for updating each).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
